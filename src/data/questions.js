export const questions = [
  {
    id: 1,
    question: 'Расскажите про event loop',
    answer: `
    Event Loop (цикл событий) — это один из ключевых аспектов асинхронного программирования, обеспечивающий возможность выполнения JavaScript-кода в однопоточном режиме, не блокируя выполнение других операций. Это достигается за счёт использования цикла, который постоянно проверяет, есть ли задачи для выполнения, и если они есть, то выполняет их одну за другой.

JavaScript работает в одном потоке, что означает, что в любой момент времени может выполняться только одна операция. Однако, благодаря Event Loop, он способен обрабатывать асинхронные действия, такие как запросы к серверу, таймеры или обработка событий пользовательского интерфейса, не останавливаясь для ожидания их завершения.

Работает Event Loop следующим образом:
1. Call Stack (Стек вызовов): Содержит текущий стек выполнения функций. Когда функция вызывается, она добавляется в стек вызовов, а когда выполнение функции заканчивается, она удаляется из стека.
2. Callback Queue (Очередь обратных вызовов): Когда асинхронная операция завершается, её callback (функция обратного вызова) помещается в очередь обратных вызовов.
3. Event Loop: Цикл событий непрерывно проверяет стек вызовов на наличие функций для выполнения. Если стек вызовов пуст, Event Loop извлекает первую функцию из очереди обратных вызовов и помещает её в стек вызовов для выполнения.

Это позволяет JavaScript обрабатывать длительные операции, такие как загрузка данных, не блокируя главный поток и обеспечивая отзывчивость приложения.

Пример кода:

console.log('Первое сообщение');
setTimeout(() => {
    console.log('Сообщение из setTimeout');
}, 0);
console.log('Второе сообщение');
В этом примере, несмотря на то что setTimeout имеет задержку в 0 миллисекунд, вывод в консоль будет следующим:

Первое сообщение
Второе сообщение
Сообщение из setTimeout
Это происходит потому, что вызов setTimeout помещает его callback в очередь обратных вызовов, который будет выполнен только после того, как выполнение текущего кода в стеке вызовов завершится и стек станет пустым.

Event Loop позволяет JavaScript выполнять асинхронные операции, обрабатывая их по мере завершения, не блокируя при этом главный поток выполнения. Это делает возможным создание отзывчивых и асинхронных веб-приложений.
    `,
  },
  {
    id: 2,
    question: 'Что такое JSX?',
    answer:
      'JSX - это синтаксический сахар для React, который позволяет использовать HTML-подобный синтаксис для описания структуры компонентов React, делая код более читабельным и выразительным.',
  },
  {
    id: 3,
    question: 'Что такое Redux?',
    answer:
      'Redux - это библиотека для управления состоянием приложения, особенно полезная для приложений с большим и сложным состоянием, обеспечивающая предсказуемый поток данных.',
  },
  {
    id: 4,
    question: 'Что такое компонент в React?',
    answer:
      'Компонент в React - это независимый и переиспользуемый блок кода, который отвечает за отрисовку части пользовательского интерфейса.',
  },
  {
    id: 5,
    question: 'Что такое props в React?',
    answer:
      'Props (свойства) в React - это конфигурация компонентов, передаваемая от родительского компонента к дочернему, используемая для настройки поведения и вида компонента.',
  },
  {
    id: 6,
    question: 'Что такое state в React?',
    answer:
      'State (состояние) в React - это объект, который содержит данные, влияющие на отрисовку компонента, и может изменяться со временем в ответ на действия пользователя или системные события.',
  },
  {
    id: 7,
    question: 'Что такое Hook в React?',
    answer:
      'Hook - это специальная функция в React, которая позволяет использовать состояние и другие возможности React без написания классов. Например, useState и useEffect.',
  },
  {
    id: 8,
    question: 'Чем отличается классовый компонент от функционального в React?',
    answer:
      'Классовые компоненты могут содержать состояние и методы жизненного цикла, в то время как функциональные компоненты, до появления Hook, были более простыми и служили для отрисовки UI.',
  },
  {
    id: 9,
    question: 'Что такое Virtual DOM?',
    answer:
      'Virtual DOM - это концепция, используемая в React и других библиотеках, представляющая легковесную копию реального DOM в памяти, что позволяет оптимизировать обновление интерфейса.',
  },
  {
    id: 9,
    question: 'Что такое Virtual DOM?',
    answer:
      'Virtual DOM - это концепция, используемая в React и других библиотеках, представляющая легковесную копию реального DOM в памяти, что позволяет оптимизировать обновление интерфейса.',
  },
  {
    id: 9,
    question: 'Что такое Virtual DOM?',
    answer:
      'Virtual DOM - это концепция, используемая в React и других библиотеках, представляющая легковесную копию реального DOM в памяти, что позволяет оптимизировать обновление интерфейса.',
  },
  {
    id: 9,
    question: 'Что такое Virtual DOM?',
    answer:
      'Virtual DOM - это концепция, используемая в React и других библиотеках, представляющая легковесную копию реального DOM в памяти, что позволяет оптимизировать обновление интерфейса.',
  },
  {
    id: 9,
    question: 'Что такое Virtual DOM?',
    answer:
      'Virtual DOM - это концепция, используемая в React и других библиотеках, представляющая легковесную копию реального DOM в памяти, что позволяет оптимизировать обновление интерфейса.',
  },
  {
    id: 9,
    question: 'Что такое Virtual DOM?',
    answer:
      'Virtual DOM - это концепция, используемая в React и других библиотеках, представляющая легковесную копию реального DOM в памяти, что позволяет оптимизировать обновление интерфейса.',
  },
  {
    id: 9,
    question: 'Что такое Virtual DOM?',
    answer:
      'Virtual DOM - это концепция, используемая в React и других библиотеках, представляющая легковесную копию реального DOM в памяти, что позволяет оптимизировать обновление интерфейса.',
  },
  {
    id: 9,
    question: 'Что такое Virtual DOM?',
    answer:
      'Virtual DOM - это концепция, используемая в React и других библиотеках, представляющая легковесную копию реального DOM в памяти, что позволяет оптимизировать обновление интерфейса.',
  },

  {
    id: 10,
    question: 'Что такое контекст (Context) в React?',
    answer:
      'Context в React предоставляет способ передачи данных через дерево компонентов без необходимости передавать props на каждом уровне вручную, упрощая доступ к данным в глубоко вложенных компонентах.',
  },
];
